M-x magit-status -- open magit buffer

Status
=====
TAB on a section --- toggles display
1 2 3 4 on a section --- increase verbosity
M-1 M-2 M-3 M-4 -- increase verbosity of all sections
M-h M-H         --- hide all 2 verbosity
M-s M-S		--- show all (level 4 verbosity)

Untracked Files
===============
In untracked-files section
s - stage a file
s - (on the untracked-files section title) stage all untracked files
C-u s - from anywhere will stage all the untracked files
i - add to .gitignore
I - add to .exclude
C-u i - get file name for ignoring

Staging/Committing
===============
s/S - stage
u/U - unstage
C-u s - ask filename to be staged
C-u S - stage all untracked files
k - discard uncommited change (checkout)
c - commit message
C-c C-c - write comment and commit

History
=======
l - display the history
Ret - in commit - open a new window for the commit and put the point there
SPC - display commit info in another window
a - apply the current commit to the current branch (cherry-picking)
A - cherrypick and commit
v - revert the current commit
C-w - save the cummit number
= - diff between the current 
. - select the commit
s - grep history
reflog can be found in the history page

Diffing
=======
d - show diff with working tree
D - show diff between arbitrary trees

Tagging
=======
t t - make a lightweight tag
t T - make an annotated tag
In the buffer C-c C-c will make the tag

Resetting*
=========
x - reset head to a particular version
X on a particular commit - reset the wroking tree and stagin area to the specified commit

Stashing
========
z z - stash changes
a - apply stash
A - pop stash
k - delete stash
z Z - create a stash and retain the changes in the working tree and index

Branching
=========
b - change branch
B - create a branch and switch to it

Wazzup
======
w - show summary of other branches

Merging
=======
m - manual merge (applies all changes to working area but does not commit)
M - automatic merge

Rebasing
=======
R - start/continue with rebase

Pushing & Pulling
=================
P - push
C-u P - push to which repository?

f - git remote update
F - git pull


Rewriting
=========
Look at the explanation in the manual below
r - rewrite a particular commit
If you do that the successive commits will be shown as pending and you will have the option to
a - apply the commits or
A - apply and save the commits

As hinted at earlier, you can rewrite your commit history. For example, you can reset he current head to an earlier commit with x. This leaves the working tree unchanged, and the status buffer will show all the changes that have been made since that new value of the current head. You can commit these changes again, possibly splitting them into multiple commits as you go along.

Amending your last commit is a common special case of rewriting history like this.

Another common way to rewrite history is to reset the head to an earlier commit, and then to cherry pick the previous commits in a different order. You could pick them from the reflog, for example.

Magit has several commands that can simplify the book keeping associated with rewriting. These commands all start with the r prefix key.

Typing r s will start a rewrite operation. You will be prompted for a base commit, and all commits between the current head and this commit are put in a list of Pending commits (including the base commit). The current head will then be reset to the parent of the base commit.

You would then typically use a and A to cherry pick commits from the list of pending commits in the desired order, until all have been applied. Magit shows which commits have been applied by changing their marker from * to ..

Using A will immediately commit the commit (as usual). If you want to combine multiple previous commits into a single new one, use a to apply them all to your working tree, and then commit them together.

Magit has no explicit support for rewriting merge commits. It will happily include merge commits in the list of pending commits, but there is no way of replaying them automatically. You have to redo the merge explicitly.

You can also use v to revert a commit when you have changed your mind. This will change the . mark back to *.

Once you are done with the rewrite, type r t to remove the book keeping information from the status buffer.

If you rather wish to start over, type r a. This will abort the rewriting, resetting the current head back to the value it had before the rewrite was started with r s.

Typing r f will finish the rewrite: it will apply all unused commits one after the other, as if you would us A with all of them.

You can change the * and . marks of a pending commit explicitly with r * and r ..

In addition to a list of pending commits, the status buffer will show the Pending changes. This section shows the diff between the original head and the current head. You can use it to review the changes that you still need to rewrite, and you can apply hunks from it, like from any other diff. 
